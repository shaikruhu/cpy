<html>
<head>
<title>WhatsupNYC</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="./assets/leaflet/leaflet-0.7.3/leaflet.css">
</head>
<body>

<div id="map" style="width: 100%; height: 100%; position: relative;" class="leaflet-container leaflet-fade-anim" tabindex="0"></div>
<script src="./assets/jquery-1.11.1.js"></script>
<script src="./assets/leaflet/leaflet-0.7.3/leaflet.js"></script>
<script>

// THEATERS 
$.ajax({
dataType: "json",
url: "./GeoJSON/Manhattan_Theaters.geojson",
success: function(data) {
    $(data.features).each(function(key, data) {
        theaters_nyc.addData(data);
    });
}
}).error(function() {});

// Styling: medium blue
var theaterMarker = {
    radius: 7,
    fillColor: "#0000CD",
    color: "#0000CD",
    weight: 1,
    opacity: 1,
    fillOpcacity: 1,
};

var theaters_nyc = L.geoJson(theaters_nyc, {
    pointToLayer: function (feature, latlng) {
        return L.circleMarker(latlng, theaterMarker);
    },
    onEachFeature: function (feature, layer) {
        layer.bindPopup(feature.properties.NAME + "<br>" + feature.
            properties.TEL + "<br>" + feature.properties.ADDRESS1 + "<br>" + 
                feature.properties.URL);
    }
});

// MUSEUMS
$.ajax({
dataType: "json",
url: "./GeoJSON/Manhattan_Museums.geojson",
success: function(data) {
    $(data.features).each(function(key, data) {
        museums_nyc.addData(data);
    });
}
}).error(function() {});

// Styling: dark violet
var museumMarker = {
    radius: 7,
    fillColor: "#9400D3",
    color: "#9400D3",
    weight: 1,
    opacity: 1,
    fillOpcacity: 1,
};

var museums_nyc = L.geoJson(museums_nyc, {
    pointToLayer: function (feature, latlng) {
        return L.circleMarker(latlng, museumMarker);
    },
    onEachFeature: function (feature, layer) {
        layer.bindPopup(feature.properties.NAME + "<br>" + feature.
            properties.TEL + "<br>" + feature.properties.ADRESS1 + "<br>" + 
                feature.properties.URL);
    }
});
// WIFI 
$.ajax({
dataType: "json",
url: "./GeoJSON/Manhattan_WIFI.geojson",
success: function(data) {
	$(data.features).each(function(key, data) {
		wifi_nyc.addData(data);
	});
}
}).error(function() {});

// Styling: orange
var wifiMarker = {
	radius: 7,
	fillColor: "#00FFFF",
	color: "#00FFFF",
	weight: 1,
	opacity: 1,
	fillOpcacity: 1,
};

var wifi_nyc = L.geoJson(wifi_nyc, {
	pointToLayer: function (feature, latlng) {
		return L.circleMarker(latlng, wifiMarker);
	},
	onEachFeature: function (feature, layer) {
		layer.bindPopup(feature.properties.Provider + "<br>" + feature.properties.Type 
		+ "<br>" + feature.properties.Location);
	}
});

// SUBWAY STATIONS 
$.ajax({
dataType: "json",
url: "./GeoJSON/Manhattan_SubwayStations.geojson",
success: function(data) {
	$(data.features).each(function(key, data) {
		subwaystations_nyc.addData(data);
	});
}
}).error(function() {});

// Styling: cyan
var subwaystationsMarker = {
	radius: 7,
	fillColor: "#ffa500",
	color: "#ffa500",
	weight: 1,
	opacity: 1,
	fillOpcacity: 1,
};

var subwaystations_nyc = L.geoJson(subwaystations_nyc, {
	pointToLayer: function (feature, latlng) {
		return L.circleMarker(latlng, subwaystationsMarker);
	},
	onEachFeature: function (feature, layer) {
		layer.bindPopup(feature.properties.NAME + "<br>" + 
			feature.properties.LINE + " Train");
	}
});

//This is copied from the example and edited to include each of our data layers in the overlays variable

	//Setting map attribute text
        var mbAttr = 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
            mbUrl = 'https://{s}.tiles.mapbox.com/v3/{id}/{z}/{x}/{y}.png';

        var grayscale   = L.tileLayer(mbUrl, {id: 'examples.map-20v6611k', attribution: mbAttr}),
            streets  = L.tileLayer(mbUrl, {id: 'examples.map-i875mjb7',   attribution: mbAttr});

        var map = L.map('map', {
            center: [40.7685, -73.9647],
            zoom: 13,
            layers: [grayscale]
        });

        var baseLayers = {
            "Grayscale": grayscale,
            "Streets": streets
        };

        var overlays = {
            "Theaters": theaters_nyc,
            "Museums": museums_nyc,
	    "WIFI": wifi_nyc,
	    "Subway Stops": subwaystations_nyc
        };

        L.control.layers(baseLayers, overlays).addTo(map);

// These lines tell the map what to do when the location is succesfull or there is an error 
function onLocationFound(e) {

	var radius = e.accuracy/2;

	L.marker(e.latlng).addTo(map)
		.bindPopup("You are possibly maybe somewhere within this circle").openPopup();

	L.circle(e.latlng, radius).addTo(map);
}

function onLocationError(e) {
	alert(e.message);
}

map.on('locationfound', onLocationFound);
map.on('locationerror', onLocationError);

// This line is the locate function of leaflet.js
map.locate({setView: true, maxZoom: 16})

</script>
</body>
</html>
